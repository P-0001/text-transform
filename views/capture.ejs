<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Capture - Text Transformer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/style.css">

    <style>
        #container {
            margin: 0px auto;
            width: 500px;
            height: 375px;
            border: 10px #333 solid;
            position: relative;
        }

        #videoElement {
            width: 500px;
            height: 375px;
            background-color: #666;
        }

        #stop {
            margin: 20px auto;
            display: block;
            padding: 10px 20px;
            font-size: 16px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #stop:hover {
            background-color: #555;
        }

        #container.fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 9999;
            border: none;
        }

        #container.fullscreen #videoElement {
            width: 100%;
            height: 100%;
        }

        #fullscreen {
            margin: 20px auto;
            display: block;
            padding: 10px 20px;
            font-size: 16px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #deviceSelect {
            margin: 20px auto;
            display: block;
            padding: 10px;
            font-size: 16px;
            width: 300px;
            border-radius: 5px;
            border: 1px solid #333;
        }
    </style>
</head>

<body>
    <h1>Capture</h1>
    <!DOCTYPE html>
    <html>

    <head>
        <meta charset="utf-8">
        <title>Display Webcam Stream</title>

        <style>
            #container {
                margin: 0px auto;
                width: 500px;
                height: 375px;
                border: 10px #333 solid;
                position: relative;
            }

            #videoElement {
                width: 500px;
                height: 375px;
                background-color: #666;
            }

            #stop {
                margin: 20px auto;
                display: block;
                padding: 10px 20px;
                font-size: 16px;
                background-color: #333;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            #stop:hover {
                background-color: #555;
            }

            #container.fullscreen {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 9999;
                border: none;
            }

            #container.fullscreen #videoElement {
                width: 100%;
                height: 100%;
            }

            #fullscreen {
                margin: 20px auto;
                display: block;
                padding: 10px 20px;
                font-size: 16px;
                background-color: #333;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            #deviceSelect {
                margin: 20px auto;
                display: block;
                padding: 10px;
                font-size: 16px;
                width: 300px;
                border-radius: 5px;
                border: 1px solid #333;
            }
        </style>
    </head>

    <body>
        <div id="container">
            <video autoplay="true" id="videoElement">

            </video>
        </div>

        <select id="deviceSelect">
            <option value="">Loading devices...</option>
        </select>

        <button id="stop">Stop</button>
        <button id="fullscreen">Toggle Fullscreen</button>

        <script>
            window.addEventListener('load', function () {
                var video = document.querySelector("#videoElement");
                var container = document.querySelector("#container");
                var fullscreenBtn = document.querySelector("#fullscreen");
                var deviceSelect = document.querySelector("#deviceSelect");
                var currentStream = null;

                // Function to populate device list
                async function getDevices() {
                    try {
                        const devices = await navigator.mediaDevices.enumerateDevices();
                        const videoDevices = devices.filter(device => device.kind === 'videoinput');

                        deviceSelect.innerHTML = '';
                        videoDevices.forEach(device => {
                            const option = document.createElement('option');
                            option.value = device.deviceId;
                            option.text = device.label || `Camera ${videoDevices.indexOf(device) + 1}`;
                            deviceSelect.appendChild(option);
                        });

                        if (videoDevices.length > 0) {
                            startVideo(videoDevices[0].deviceId);
                        }
                    } catch (error) {
                        console.error('Error getting devices:', error);
                    }
                }

                // Function to start video with selected device
                async function startVideo(deviceId) {
                    try {
                        if (currentStream) {
                            currentStream.getTracks().forEach(track => track.stop());
                        }

                        const stream = await navigator.mediaDevices.getUserMedia({
                            video: {
                                deviceId: deviceId ? { exact: deviceId } : undefined,
                                width: { ideal: 1920 },
                                height: { ideal: 1080 },
                                frameRate: { ideal: 60 }
                            }
                        });

                        currentStream = stream;
                        video.srcObject = stream;
                    } catch (error) {
                        console.error('Error starting video:', error);
                    }
                }

                // Event listener for device selection
                deviceSelect.addEventListener('change', function () {
                    startVideo(this.value);
                });

                // Get initial device list
                getDevices();

                function stop(e) {
                    if (currentStream) {
                        currentStream.getTracks().forEach(track => track.stop());
                        currentStream = null;
                    }
                    video.srcObject = null;
                }



                function toggleFullscreen() {
                    container.classList.toggle('fullscreen');
                }

                document.getElementById('stop').addEventListener('click', stop);
                document.getElementById('fullscreen').addEventListener('click', toggleFullscreen);
            });
        </script>
    </body>

    </html>

</body>

</html>