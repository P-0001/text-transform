<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Capture - Text Transformer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/style.css">
    <style>
        #container {
            margin: 20px auto;
            width: 100%;
            max-width: 800px;
            height: 450px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            background-color: var(--bg-secondary);
        }

        #videoElement {
            width: 100%;
            height: 100%;
            background-color: var(--bg-secondary);
            object-fit: cover;
        }

        .controls {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin: 1rem 0;
            flex-wrap: wrap;
        }

        #deviceSelect {
            padding: 0.5rem;
            font-size: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            min-width: 200px;
            height: 38px;
            /* Match button height */
        }

        #container.fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 9999;
            border: none;
            border-radius: 0;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #container.fullscreen #videoElement {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #container.fullscreen .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.5);
            padding: 1rem;
            border-radius: 8px;
            z-index: 10000;
        }

        .btn-primary,
        .btn-secondary {
            height: 38px;
            padding: 0 1rem;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            white-space: nowrap;
        }

        /* Fullscreen mode styles */
        body.fullscreen-active {
            overflow: hidden;
        }

        body.fullscreen-active header,
        body.fullscreen-active main>.card>.card-header,
        body.fullscreen-active footer {
            display: none;
        }

        #exitFullscreen {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1.2rem;
        }

        body.fullscreen-active #exitFullscreen {
            display: flex;
        }

        #exitFullscreen:hover {
            background-color: rgba(0, 0, 0, 0.7);
        }
    </style>
</head>

<body>
    <header>
        <div class="logo">
            <i class="fas fa-text-height"></i>
            <h1>Text Transformer</h1>
        </div>
        <div class="header-right">
            <nav>
                <a href="/" class="nav-link">
                    <i class="fas fa-text-height"></i> Transform
                </a>
                <a href="/split" class="nav-link">
                    <i class="fas fa-cut"></i> Split
                </a>
                <a href="/youtube" class="nav-link">
                    <i class="fab fa-youtube"></i> YouTube
                </a>
                <a href="/capture" class="nav-link active">
                    <i class="fas fa-camera"></i> Capture
                </a>
            </nav>
            <div class="theme-toggle">
                <button id="darkModeToggle" class="btn-theme" title="Toggle dark mode">
                    <i class="fas fa-moon"></i>
                </button>
            </div>
        </div>
    </header>

    <main class="container">
        <div class="card">
            <div class="card-header">
                <h2>Capture Video</h2>
                <p class="subtitle">Select your camera and capture video</p>
            </div>

            <div id="container">
                <video autoplay="true" id="videoElement"></video>
            </div>

            <div class="controls">
                <select id="deviceSelect">
                    <option value="">Loading devices...</option>
                </select>
                <button id="stop" class="btn-primary">
                    <i class="fas fa-stop"></i> Stop
                </button>
                <button id="fullscreen" class="btn-secondary">
                    <i class="fas fa-expand"></i> Toggle Fullscreen
                </button>
            </div>
            <button id="exitFullscreen" title="Exit fullscreen">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </main>

    <footer>
        <p>&copy; <%= new Date().getFullYear() %> Text Transformer. All rights reserved.</p>
        <p>Created by <a style="color: var(--primary-color);" href="https://github.com/P-0001">P-0001</a></p>
        <p>Version: <%= version %>
        </p>
    </footer>

    <script>
        window.addEventListener('load', function () {
            var video = document.querySelector("#videoElement");
            var container = document.querySelector("#container");
            var fullscreenBtn = document.querySelector("#fullscreen");
            var deviceSelect = document.querySelector("#deviceSelect");
            var currentStream = null;

            // Function to populate device list
            async function getDevices() {
                try {
                    const devices = await navigator.mediaDevices.enumerateDevices();
                    const videoDevices = devices.filter(device => device.kind === 'videoinput');

                    deviceSelect.innerHTML = '';
                    videoDevices.forEach(device => {
                        const option = document.createElement('option');
                        option.value = device.deviceId;
                        option.text = device.label || `Camera ${videoDevices.indexOf(device) + 1}`;
                        deviceSelect.appendChild(option);
                    });

                    if (videoDevices.length > 0) {
                        startVideo(videoDevices[0].deviceId);
                    }
                } catch (error) {
                    console.error('Error getting devices:', error);
                }
            }

            // Function to start video with selected device
            async function startVideo(deviceId) {
                try {
                    if (currentStream) {
                        currentStream.getTracks().forEach(track => track.stop());
                    }

                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            deviceId: deviceId ? { exact: deviceId } : undefined,
                            width: { ideal: 1920 },
                            height: { ideal: 1080 },
                            frameRate: { ideal: 60 }
                        }
                    });

                    currentStream = stream;
                    video.srcObject = stream;
                } catch (error) {
                    console.error('Error starting video:', error);
                }
            }

            // Event listener for device selection
            deviceSelect.addEventListener('change', function () {
                startVideo(this.value);
            });

            // Get initial device list
            getDevices();

            document.querySelector("#stop").addEventListener('click', function () {
                if (currentStream) {
                    currentStream.getTracks().forEach(track => track.stop());
                    currentStream = null;
                }
                video.srcObject = null;
            });

            fullscreenBtn.addEventListener('click', function () {
                container.classList.toggle('fullscreen');
                document.body.classList.toggle('fullscreen-active');

                // Update button icon based on fullscreen state
                const icon = fullscreenBtn.querySelector('i');
                if (container.classList.contains('fullscreen')) {
                    icon.classList.remove('fa-expand');
                    icon.classList.add('fa-compress');
                } else {
                    icon.classList.remove('fa-compress');
                    icon.classList.add('fa-expand');
                }
            });

            // Add exit fullscreen button functionality
            document.getElementById('exitFullscreen').addEventListener('click', function () {
                container.classList.remove('fullscreen');
                document.body.classList.remove('fullscreen-active');
                const icon = fullscreenBtn.querySelector('i');
                icon.classList.remove('fa-compress');
                icon.classList.add('fa-expand');
            });

            // Add keyboard support for exiting fullscreen
            document.addEventListener('keydown', function (e) {
                if (e.key === 'Escape' && container.classList.contains('fullscreen')) {
                    container.classList.remove('fullscreen');
                    document.body.classList.remove('fullscreen-active');
                    const icon = fullscreenBtn.querySelector('i');
                    icon.classList.remove('fa-compress');
                    icon.classList.add('fa-expand');
                }
            });

            // Dark mode functionality
            const darkModeToggle = document.getElementById('darkModeToggle');
            const htmlElement = document.documentElement;

            // Check for saved theme preference
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                htmlElement.classList.add('dark-mode');
                darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
            }

            // Toggle dark mode
            darkModeToggle.addEventListener('click', function () {
                htmlElement.classList.toggle('dark-mode');

                // Update button icon
                if (htmlElement.classList.contains('dark-mode')) {
                    darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
                    localStorage.setItem('theme', 'dark');
                } else {
                    darkModeToggle.innerHTML = '<i class="fas fa-moon"></i>';
                    localStorage.setItem('theme', 'light');
                }
            });
        });
    </script>
</body>

</html>